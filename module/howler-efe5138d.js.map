{"version":3,"file":"howler-efe5138d.js","sources":["../../node_modules/.pnpm/howler@2.2.3/node_modules/howler/dist/howler.js"],"sourcesContent":["/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"names":["HowlerGlobal","self","Howler","e","i","Howl","Sound","global"],"mappings":"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"}